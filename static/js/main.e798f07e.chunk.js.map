{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["canvas","ctx","mouse","particlesArray","hue","App","useEffect","document","getElementById","getContext","width","window","innerWidth","height","innerHeight","addEventListener","x","undefined","y","e","i","push","Particle","animate","console","log","clearRect","handleParticles","requestAnimationFrame","this","size","Math","random","speedX","speedY","color","fillStyle","beginPath","arc","PI","fill","length","update","draw","j","dx","dy","sqrt","strokeStyle","lineWidth","moveTo","lineTo","stroke","splice","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e798f07e.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect } from 'react';\n\nlet canvas, ctx, mouse;\nconst particlesArray = [];\nlet hue = 0;\nexport default function App() {\n  useEffect(() => {\n    canvas = document.getElementById('canvas1');\n    ctx = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    window.addEventListener('resize', () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      // ctx.fillStyle = \"white\";\n      // ctx.fillRect(10, 10, 150, 150);\n    });\n\n    mouse = { x: undefined, y: undefined };\n    canvas.addEventListener('click', e => {\n      mouse.x = e.x;\n      mouse.y = e.y;\n    });\n    canvas.addEventListener('mousemove', e => {\n      mouse.x = e.x;\n      mouse.y = e.y;\n      for (let i = 0; i < 10; i++) {\n        particlesArray.push(new Particle());\n      }\n    });\n    animate();\n    // init();\n    console.log(particlesArray);\n  }, []);\n\n  const drawCircle = () => {\n    ctx.fillStyle = 'white';\n    // ctx.fillRect(10, 10, 150, 150);\n    // ctx.strokeStyle = \"red\";\n    // ctx.lineWidth = \"20\";\n    ctx.beginPath();\n    ctx.arc(mouse.x, mouse.y, 2, 0, Math.PI * 2);\n    ctx.fill();\n    // ctx.stroke();\n  };\n\n  const animate = () => {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    // ctx.fillStyle = 'rgba(0,0,0,0.02)';\n    // ctx.fillRect(0, 0, canvas.width, canvas.height);\n    hue += 2;\n    handleParticles();\n    requestAnimationFrame(animate);\n  };\n\n  class Particle {\n    constructor() {\n      this.x = mouse.x;\n      this.y = mouse.y;\n      // this.x = Math.random() * canvas.width;\n      // this.y = Math.random() * canvas.height;\n      this.size = Math.random() * 5 + 1;\n      this.speedX = Math.random() * 3 - 1.5;\n      this.speedY = Math.random() * 3 - 1.5;\n      this.color = 'hsl(' + hue + ',100%,50%)';\n    }\n    update() {\n      this.x += this.speedX;\n      this.y += this.speedY;\n      if (this.size > 0.2) this.size -= 0.1;\n    }\n    draw() {\n      ctx.fillStyle = this.color;\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }\n\n  const init = () => {\n    for (let i = 0; i < 100; i++) {\n      particlesArray.push(new Particle());\n    }\n  };\n\n  const handleParticles = () => {\n    for (let i = 0; i < particlesArray.length; i++) {\n      particlesArray[i].update();\n      particlesArray[i].draw();\n      console.log('in for loop');\n\n      for (let j = i; j < particlesArray.length; j++) {\n        const dx = particlesArray[i].x - particlesArray[j].x;\n        const dy = particlesArray[i].y - particlesArray[j].y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < 100) {\n          ctx.beginPath();\n          ctx.strokeStyle = particlesArray[i].color;\n          ctx.lineWidth = particlesArray[i].size / 20;\n          ctx.moveTo(particlesArray[i].x, particlesArray[i].y);\n          ctx.lineTo(particlesArray[j].x, particlesArray[j].y);\n          ctx.stroke();\n        }\n      }\n      if (particlesArray[i].size <= 0.3) {\n        particlesArray.splice(i, 1);\n        console.log(particlesArray.length);\n        i--;\n      }\n    }\n  };\n  return (\n    <div className=\"App\">\n      <canvas id=\"canvas1\"></canvas>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}